pragma solidity ^0.4.11;

library SafeMath {
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a * b;
    assert(a == 0 || c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal constant returns (uint256) {
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal constant returns (uint256) {
    assert(b &lt;= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal constant returns (uint256) {
    uint256 c = a + b;
    assert(c &gt;= a);
    return c;
  }
}

interface IERC20{
function totalSupply() constant returns (uint256 totalSupply);

function balanceOf(address _owner) constant returns (uint256 balance);

function transfer(address _to, uint256 _value) returns (bool success);

function transferFrom(address _from, address _to, uint256 _value) returns (bool success);

function approve(address _spender, uint256 _value) returns (bool success);

function allowance(address _owner, address _spender) constant returns (uint256 remaining);

event Transfer(address indexed _from, address indexed _to, uint256 _value);

event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract FomoToken is IERC20{
    using SafeMath for uint256;
    
    uint public constant _totalSupply = 7500000000000;
    string public constant symbol = &quot;FOMO&quot;;
    string public constant name = &quot;Fomo Token&quot;;
    uint8 public constant decimals = 4;
    
    mapping(address =&gt; uint256) balances;
    mapping(address =&gt; mapping(address =&gt; uint256)) allowed;
    
    
    function FomoToken(){
        balances[msg.sender] = _totalSupply;     
        
    }
    function totalSupply() constant returns (uint256 totalSupply){
        return _totalSupply;
          
    }

    function balanceOf(address _owner) constant returns (uint256 balance){
        return balances[_owner];
    
    }

    function transfer(address _to, uint256 _value) returns (bool success){
        require(
            balances[msg.sender] &gt;= _value
            &amp;&amp; _value &gt; 0
            );
            balances[msg.sender] = balances[msg.sender].sub(_value);
            balances[_to] = balances[_to].add(_value);
            Transfer(msg.sender, _to, _value);
            return true;
    
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success){
        require(
            allowed[_from][msg.sender] &gt;= _value
            &amp;&amp; balances[_from] &gt;= _value
            &amp;&amp; _value &gt; 0
            );
            balances[_from] = balances[_from].sub(_value);
            balances[_to] = balances[_to].add(_value);
            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
            Transfer(_from, _to, _value);
            return true;
        
    
    }

    function approve(address _spender, uint256 _value) returns (bool success){
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    
    }

    function allowance(address _owner, address _spender) constant returns (uint256 remaining){
        return allowed[_owner][_spender];
    
    }

    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    }
